 
#Establecer una Conexion Segura

 ##Generar una nueva llave SSH: (Cualquier sistema operativo)
 ssh-keygen -t rsa -b 4096 -C "youremail@example.com"

 ##Comprobar proceso y agregarlo (Windows)
 eval $(ssh-agent - s)
 ssh-add ~/.ssh/id_rsa
 
 Comprobar proceso y agregarlo (Mac)
 eval "$(ssh-agent -s)"
 ##¿Usas macOS Sierra 10.12.2 o superior?
 ##Haz lo siguiente:
 cd ~/.ssh
 ##Crea un archivo config…
 Con Vim vim config
 Con VSCode code config
 ##Pega la siguiente configuración en el archivo:
 Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_rsa
 
 ##Agrega tu llave
 ssh-add -K ~/.ssh/id_rsa

##Cuando usabas HTTPS para la conexion con origin y acabas de habilitar tu llave publica en el repo remoto
git status
git remote -v
git remote set-url origin git@github.com:darkgosh/Curso_GIT.git

#Crear un Repositorio local de Zero
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:darkgosh/Codigo_pyton.git
git push -u origin main

#Clonar un repositorio compartido "Este se usa cuando el repositorio ya Existe en GITHUB"
git clon git@github.com:darkgosh/Codigo_pyton.git

git status
git commit -m "Primer Comit para la carpeta Main de la PC Windows"
git log
git show
git config --global user.name "Renato DarkGoshLap"
git config --global user.email "darkgoshmx@gmail.com"
git config -l
git commit -m "Primer Comit para la carpeta Main de la PC Windows"

#Crear Repositorio local por medio del repositorio remoto. "Este lo usamos cuando el repositorio ya existe en el local y no hay nada en el remoto."
git remote add origin git@github.com:darkgosh/Codigo_pyton.git
git branch -M main
git push -u origin main


git add .
git add archivo.txt
git commit -m "Actualiacion de carpeta de Git y baja de archivos duplicados"
git commit -am "Agregue cambios que hice por error en master a cabecera"
git checkout cabecera
git checkout master
git merge cabecera

git switch -
git checkout 4e1de1a7f35a15e0e7849265a87d783b97f67c7e
git remote add origin https://github.com/darkgosh/Curso_GIT.git
git remote
git remote -v
git push origin master
git pull origin master --allow-unrelated-histories
git pull origin master

git pull origin main --allow-unrelated-histories  ## se usa en los casos que un merge marca error por quere subir historias no relacionadas.

clear
history


#Agregar los comandos para crear TAGs
git tag
git log --all --graph --decorate --oneline
alias Resumen="git log --all --graph --decorate --oneline"
git tag -a prueba -m "prueba de creacion de tags" 77fbbd8
git push origin --tags
git tag -d Nombre_tag
git push origin :refs/tags/v0.2


#Manejo de Branches
git show-branch

gitk
git checkout cabecera
git push origin cabecera 


scape + shift +zz


git config pull.rebase false  # merge
git config pull.rebase true   # rebase
git config pull.ff only       # fast-forward only

##GIT Stash El stashed nos sirve para guardar cambios para después, 
##Es una lista de estados que nos guarda algunos cambios que hicimos en Staging 
##para poder cambiar de rama sin perder el trabajo que todavía no guardamos en un commit
git branch
git stash 
git stash list --> muestra los stash guardados
git stash pop --> aplica el stash guardado desde la memoria a la rama en la que estas.
git stash branch nombreRama --> crea una nueva rama y pega el stash ahi.
git stash drop --> borra el stash de la memoria.

git add -A # Para hacer uso de amend los archivos deben de estar en staging
git commit --amend # Remendar último commit

git reflog
git checkout Puedes moverte sin realizar ningún cambio al commit exacto de la ref

git reset: Hará que el último commit sea el pasado por la ref, usar este comando sólo si sabes exactamente qué estás haciendo
git merge: Puedes hacer merge de un commit en específico, funciona igual que con una branch, pero te hace el merge del estado específico del commit mandado

git checkout master
git merge eff544f # Fusionará en un nuevo commit la historia de master con el momento específico en el que vive
git reset --soft HashDelHEAD te mantiene lo que tengas en staging ahí.
git reset --hard HashDelHEAD resetea absolutamente todo incluyendo lo que tengas en staging.

git grep color -->use la palabra color
git grep la --> donde use la palabra la
git grep -n color–> en que lineas use la palabra color
git grep -n platzi --> en que lineas use la palabra platzi
git grep -c la --> cuantas veces use la palabra la
git grep -c paltzi --> cuantas veces use la palabra platzi
git grep -c “<p>”–> cuantas veces use la etiqueta <p>
git log-S “cabecera” --> cuantas veces use la palabra cabecera en
todos los commits.
grep–> para los archivos
log --> para los commits.

git shortlog -sn = muestra cuantos commit han hecho cada miembros del equipo.
git shortlog -sn --all = muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado
git shortlog -sn --all --no-merge = muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges
git blame ARCHIVO = muestra quien hizo cada cosa linea por linea
git COMANDO --help = muestra como funciona el comando.
git blame ARCHIVO -Llinea_inicial,linea_final= muestra quien hizo cada cosa linea por linea indicándole desde que linea ver ejemplo -L35,50
**git branch -r **= se muestran todas las ramas remotas
git branch -a = se muestran todas las ramas tanto locales como remotas